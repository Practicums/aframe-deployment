# This is a workflow to build, deploy and test A-Frame applications.
name: A-Frame Deployment Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  Name : aframe
  Project_Name : metaverse-363005
  Cluster_name : aframe-cluster
  Server_Name : aframe-server
  Service_Name : aframe-service
  Ext_IP: 104.154.106.207
  URL: https://aframe.endpoints.metaverse-363005.cloud.goog
  pkgname: a.frame.application

jobs:
  build_deploy_test:
    name: Build, Deploy and Test A-Frame application
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.RSA_KEY }} 
          known_hosts: 'placeholder'
          
      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
        
      - name: Setting up GCloud
        uses: google-github-actions/setup-gcloud@v0
        with:
          version: '286.0.0'
          service_account_key: ${{ secrets.GCP_KEY }}
          service_account_email: ${{ secrets.SERVICE_EMAIL }}
          project_id: ${{ env.Project_Name }}

      - name: Copy files to remote vm
        run: rsync -avz -e "ssh -p 22" ./ ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/home/${{ secrets.SSH_USER }}/project/${{ env.Name }} --delete

      - name: Authenticate Docker
        run: |-
          gcloud auth configure-docker -q
            
      - name: Build Docker Image
        run: |-
          docker build -t ${{ env.Name }} .

      - name: Tag Docker Image
        run: |-
          docker tag ${{ env.Name }} gcr.io/${{ env.Project_Name }}/${{ env.Name }}

      - name: Push Docker Image
        run: |-
          docker push gcr.io/${{ env.Project_Name }}/${{ env.Name }}

      - name: Deploy Docker Image and expose as HTTPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }} 
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.RSA_KEY }} 
          port: 22
          script: | 
            gcloud endpoints services deploy /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/openapi.yaml 
            gcloud container clusters create ${{ env.Cluster_name }} 2> /dev/null
            gcloud container clusters get-credentials ${{ env.Cluster_name }}
            kubectl delete service ${{ env.Service_Name }} 
            kubectl delete deployment ${{ env.Server_Name }}
            sleep 10
            helm install nginx-stable/nginx-ingress --set controller.service.loadBalancerIP="${{ env.Ext_IP }}",rbac.create=true --generate-name
            kubectl create deployment ${{ env.Server_Name }} --image=gcr.io/${{ env.Project_Name }}/${{ env.Name }}
            kubectl expose deployment ${{ env.Server_Name }} --name=${{ env.Service_Name }} --port=80 --target-port=80
            sleep 60
            kubectl apply -f ingress.yaml
            chmod +x /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/cert-manager_install.sh && /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/cert-manager_install.sh
            export EMAIL=${{ secrets.SERVICE_EMAIL }}
            cat /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/letsencrypt-issuer.yaml | sed -e "s/email: ''/email: $EMAIL/g" | kubectl apply -f-
            kubectl apply -f /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/ingress-tls.yaml
            /home/${{ secrets.SSH_USER }}/testproject/code/webapp_test.py ${{ env.URL }}
            /usr/bin/python3 /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/gen.py --pkgname "${{ env.pkgname }}" --long "AFrame Application" --short "AF" --url "${{ env.URL }}" --path "/home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/webapp/" --html "index.html"
            /usr/bin/sshpass -f /home/${{ secrets.SSH_USER }}/project/winpass.txt ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.WINDOWS_HOST }} 'wget ${{ env.URL }}/manifest.json && ovr-platform-util.exe create-pwa -o .\Documents\output.apk --android-sdk %androidsdk% --package-name ${{ env.pkgname }} --manifest-content-file manifest.json'
            /usr/bin/sshpass -f /home/${{ secrets.SSH_USER }}/project/winpass.txt scp -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.WINDOWS_HOST }}:Documents/output.apk /home/${{ secrets.SSH_USER }}/project/${{ env.Name }}/webapp/output.apk